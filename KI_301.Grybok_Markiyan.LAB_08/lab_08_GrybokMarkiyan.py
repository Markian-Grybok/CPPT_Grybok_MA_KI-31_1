import os  # Модуль для взаємодії з операційною системою (наприклад, перевірка наявності файлу)
import struct  # Модуль для роботи з двійковими даними та конверсії між Python-значеннями та C-структурами
import sys  # Модуль для доступу до системних параметрів і функцій, таких як вихід з програми
import math

# Функція для запису результату у текстовий файл
def writeResTxt(fName, result):
    # Відкриває файл у режимі запису ('w'), перезаписує файл, якщо він вже існує
    with open(fName, 'w') as f:
        f.write(str(result))  # Перетворює результат у рядок і записує його у файл

# Функція для зчитування результату з текстового файлу
def readResTxt(fName):
    result = 0.0  # Ініціалізуємо результат значенням 0.0 (за замовчуванням)
    try:
        # Перевіряємо, чи існує файл, перед тим як читати його
        if os.path.exists(fName):
            # Відкриваємо файл у режимі читання ('r')
            with open(fName, 'r') as f:
                result = f.read()  # Зчитуємо вміст файлу (у вигляді рядка)
        else:
            # Якщо файл не існує, викликаємо помилку FileNotFoundError
            raise FileNotFoundError(f"Файл {fName} не знайдено.")
    except FileNotFoundError as e:
        # Виводимо повідомлення про помилку, якщо файл не знайдено
        print(e)
    return result  # Повертаємо результат у вигляді рядка (його можна перетворити на float, якщо необхідно)

# Функція для запису результату у двійковий файл
def writeResBin(fName, result):
    # Відкриває файл у режимі двійкового запису ('wb')
    with open(fName, 'wb') as f:
        # Використовуємо struct.pack для конвертації числа з плаваючою комою (result) у двійковий формат ('f' для float)
        f.write(struct.pack('f', result))

# Функція для зчитування результату з двійкового файлу
def readResBin(fName):
    result = 0.0  # Ініціалізуємо результат значенням 0.0 (за замовчуванням)
    try:
        # Перевіряємо, чи існує файл, перед тим як читати його
        if os.path.exists(fName):
            # Відкриваємо файл у режимі двійкового читання ('rb')
            with open(fName, 'rb') as f:
                # Використовуємо struct.unpack для зчитування двійкових даних і конвертації їх назад у число з плаваючою комою ('f' для float)
                result = struct.unpack('f', f.read())[0]  # Повертає кортеж, тому беремо перше значення
        else:
            # Якщо файл не існує, викликаємо помилку FileNotFoundError
            raise FileNotFoundError(f"Файл {fName} не знайдено.")
    except FileNotFoundError as e:
        # Виводимо повідомлення про помилку, якщо файл не знайдено
        print(e)
    return result  # Повертаємо результат у вигляді числа з плаваючою комою

# Функція для виконання простого обчислення (піднести до квадрату введене значення)
def calculate(x):
    return math.tan(x) / (3 * x)  # Повертає x у квадраті

# Основна функція для виконання програми
if __name__ == "__main__":
    # Спроба зчитати вхідні дані та виконати обчислення
    try:
        # Отримуємо вхідні дані від користувача і конвертуємо їх у тип float
        data = float(input("Введіть число: "))
        result = calculate(data)  # Виконуємо обчислення
        print(f"Результат: {result}")  # Виводимо результа

        # Записуємо результат у текстовий та двійковий файли
        writeResTxt("txtRes.txt", result)
        writeResBin("binRes.bin", result)

        # Зчитуємо результат із двійкового та текстового файлів і виводимо їх
        print("Результат із двійкового файлу: {0}".format(readResBin("binRes.bin")))
        print("Результат із текстового файлу: {0}".format(readResTxt("txtRes.txt")))

    # Обробка випадків, коли файл не знайдено (хоча це малоймовірно, оскільки файли були записані раніше)
    except FileNotFoundError as e:
        print(e)
        sys.exit(1)  # Завершуємо програму з кодом помилки

    # Обробка помилкових введених даних (нечислових значень) від користувача
    except ValueError as e:
        print("Неправильний ввід. Будь ласка, введіть дійсне число.")
        sys.exit(1)  # Завершуємо програму з кодом помилки
